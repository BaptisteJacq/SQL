-- Requêtes SQL nécessaire pour normaliser les données IRIS

-- 1. Création des objectids dans la table importée des IRIS pour créer des identifiants unique à partir de ceux déja existant dans la table TA_IRIS
-- 1.1. Ajout d'une colonne IDENTITY dans la table pour créer des nouveaux identifiants
ALTER TABLE system.contours_iris_2019
ADD IDENTITE INTEGER GENERATED BY DEFAULT AS IDENTITY
START WITH 1
INCREMENT BY 1
NOCACHE;
COMMIT;


-- 1.2 Mise à jour de la colonne IDENTITY pour avoir des clé unique qui suivent l'incrémentation de la séquence de la table TA_IRIS
UPDATE system.contours_iris_2019
-- Attention à la séquence utilisée
SET identite = ISEQ$$_79081.nextval;
-- Attention à la séquence utilisée


-- 2. Insertion des noms IRIS dans TA_NOM
MERGE INTO ta_nom n
USING 
        (
        SELECT distinct(NOM_IRIS) FROM contours_iris_2019
        ) temp
ON (temp.NOM_IRIS = n.nom)
WHEN NOT MATCHED THEN
INSERT (n.nom)
VALUES (temp.NOM_IRIS);


-- 3. insertion du fid_libelle_long 'code IRIS' dans la table TA_LIBELLE
MERGE INTO ta_libelle l
USING 
        (
            SELECT ll.objectid AS fid_libelle_long 
            FROM ta_libelle_long ll
            INNER JOIN ta_famille_libelle fl ON fl.fid_libelle_long = ll.objectid
            INNER JOIN ta_famille f ON f.objectid = fl.fid_famille
            WHERE ll.valeur = 'code IRIS'
            AND f.valeur = 'Identifiant de zone administrative'
        ) temp
ON (temp.fid_libelle_long = l.fid_libelle_long)
WHEN NOT MATCHED THEN
INSERT (l.fid_libelle_long)
VALUES (temp.fid_libelle_long);


-- 4. Insertion des codes IRIS TA_CODE
MERGE INTO ta_code c
USING 
        (
			SELECT
-- IRIS: code à 4 chiffres ou code_iris à 10 chiffres
			    distinct(i.iris) AS code,
			    l.objectid AS fid_libelle
			FROM 
			    SYSTEM.contours_iris_2019 i,
			    ta_libelle l
			INNER JOIN ta_libelle_long ll ON l.fid_libelle_long = ll.objectid
			INNER JOIN ta_famille_libelle fl ON fl.fid_libelle_long = ll.objectid
			INNER JOIN ta_famille f ON fl.fid_famille = f.objectid
			WHERE ll.valeur = 'code IRIS'
			AND f.valeur = 'Identifiant de zone administrative'
        ) temp
ON (temp.code = c.code
AND temp.fid_libelle = c.fid_libelle)
WHEN NOT MATCHED THEN
INSERT (c.code,c.fid_libelle)
VALUES (temp.code,temp.fid_libelle);


-- 5. Insertion des géométrie des IRIS dans TA_IRIS_GEOM
INSERT INTO ta_iris_geom(geom)
SELECT 
    ora_geometry
FROM
    contours_iris_2019 a
-- Sous requete dans le WHERE pour n'insérer que les nouvelles géométrie pas encore présente dans la table
WHERE
    identite not IN
        (SELECT
            a.identite
        FROM
            contours_iris_2019 a,
            ta_iris_geom b
        WHERE
            SDO_RELATE(a.ora_geometry, b.geom,'mask=equal') = 'TRUE')
;


-- 6. Insertion des données IRIS dans TA_IRIS
MERGE INTO ta_iris ti
USING 
    (
        SELECT
            a.identite AS objectid,
            d.objectid AS fid_lib_type,
            g.objectid AS fid_code,
            i.objectid AS fid_nom,
            h.objectid AS fid_metadonnee,
            j.objectid AS fid_iris_geom
        FROM
            ta_metadonnee h,
            ta_iris_geom j,
            system.contours_iris_2019 a
            INNER JOIN ta_libelle_court b ON b.valeur=a.typ_iris    
            INNER JOIN ta_correspondance_libelle c ON c.fid_libelle_court = b.objectid
            INNER JOIN ta_libelle d ON c.fid_libelle=d.objectid
            INNER JOIN ta_libelle_long ll ON d.fid_libelle_long = ll.objectid
            INNER JOIN ta_famille_libelle e ON e.fid_libelle_long = ll.objectid
            INNER JOIN ta_famille f ON f.objectid = e.fid_famille
            INNER JOIN ta_code g ON a.iris = g.code
            INNER JOIN ta_nom i ON a.nom_iris = i.nom
        -- sous requete dans le WHERE pour être sur d'avoir des clé étrangé fid_code qui correspondent à des code IRIS
        WHERE
            f.valeur = 'type de zone IRIS'
        -- sous requete AND pour insérer le fid_métadonnee au millesime le plus récent pour la donnée considérée
        AND 
            h.objectid IN
                (
                SELECT
                    metadonnee_objectid
                FROM
                    (
                    SELECT
                        max(a.objectid) AS metadonnee_objectid,
                        max(c.nom_source) AS source,
                        max(b.millesime) AS millesime,
                        max(p.url) AS url,
                        max(o.acronyme)AS acronyme
                    FROM
                        ta_metadonnee a
                        INNER JOIN ta_date_acquisition b ON a.fid_acquisition = b.objectid
                        INNER JOIN ta_source c ON a.fid_source = c.objectid
                        INNER JOIN ta_provenance p ON a.fid_provenance = p.objectid
                        INNER JOIN ta_organisme o ON a.fid_organisme = o.objectid
                    WHERE
                        c.nom_source = 'Contours IRIS'
                    )
                )
        -- sous requete AND pour insérer le fid_iris_geom de la bonne géométrie de l'IRIS.
        AND
            SDO_RELATE(a.ora_geometry, j.geom,'mask=equal') = 'TRUE'
    )temp
ON (temp.fid_lib_type = ti.fid_lib_type
AND temp.fid_code = ti.fid_code
AND temp.fid_nom = ti.fid_nom
AND temp.fid_metadonnee = ti.fid_metadonnee
AND temp.fid_iris_geom = ti.fid_iris_geom )
WHEN NOT MATCHED THEN
INSERT (ti.objectid,ti.fid_lib_type,ti.fid_code,ti.fid_nom,ti.fid_metadonnee,ti.fid_iris_geom)
VALUES (temp.objectid,temp.fid_lib_type,temp.fid_code,temp.fid_nom,temp.fid_metadonnee,temp.fid_iris_geom)
;