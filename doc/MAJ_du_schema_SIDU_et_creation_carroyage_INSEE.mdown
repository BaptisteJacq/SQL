# Mise à jour du schéma SIDU et création des carroyages INSEE

## I. Mise à jour du schéma SIDU

### Contexte :
* Le schéma SIDU est un duplicata du schéma G-SIDU et contient la base voie ;
* Les deux schémas sont sur l'instance CUDL (Oracle 11g) ;
* La saisie des données géographiques est faite dans le schéma G-SIDU par Marie-Hélène et Marie-Christine, tandis que le reste (données attributaires) est géré par le service Voirie dans le schéma SIDU ;
* La mise à jour du schéma SIDU se fait tous les deux-trois mois à la demande du service Voirie via des procédures stockées dans SQL Developper et tapant sur G-SIDU ;

### Méthode de mise à jour du schéma SIDU

Personnes pouvant nous renseigner sur la base voie : Jacqueline Maroi et Serge Hombert.  
De plus Jacqueline a écrit une documentation qui est celle utilisée aujourd'hui et qui reprend le process mis en place par Francis Voet.

#### 1.1 Il faut lancer les six procédures dans l'ordre suivant et surtout les relancer jusqu'à ce qu'elle n'exporte plus rien :
1. Lancer la procédure *PRC_EXPORT_BASEVOIE* ;
2. Lancer la procédure *PRC_EXPORT_MAJDIN* ;
3. Lancer la procédure *PRC_EXPORT_NEWCVT* ;
4. Lancer la procédure *PRC_EXPORT_VOIECUT* ;
5. Lancer la procédure *PRC_EXPORT_SEUIL* **qui génère des scripts qu'il faut ensuite lancer et valider (commit)**. Cette procédure ne met pas la donnée à jour directement;
6. Lancer la procédure *PRC_EXPORT_* ;

#### 1.2 Les erreurs rencontrées et leurs solutions par procédure :

**PRC_EXPORT_VOIECUT :** 
* *Erreur :*Il y a souvent un soucis de mise à jour du statut de certains tronçons qui passent de valide à invalide en boucle.
* *Solution :* Dans ce cas de figure un tronçon sera marqué à la fois en *valide* et en *invalide*, il faudra alors supprimer celui marqué *invalide*.

![Troncon_base_voie_Valide_invalide](troncons_baseVoie_valideInvalide)

**PRC_EXPORT_SEUIL :**
* *Erreur :* De temps en temps un seuil peut être situé à plus d'1km de son tronçon d'appartenance, il s'agit d'une erreur de saisie.
Dans ce cas la vue *NEW_ILTASIT*, utilisée dans la procédure, génère un nombre supérieur à 6 chiffres dans le champ *NBABSCIS*, ce qui provoque une erreur, envoie un mail avec le message d'erreur à l'adresse *geotrigger@lille-metropole.fr* et stoppe la procédure.  

![Message_erreur_distance_seuil_et_troncon](Message_erreur_distance_seuil_troncon)  

* *Solution :* Dans la vue *NEW_ILTASIT* cherchez les données du champ IDSEUI qui posent problème, puis dans QGIS ouvrez les tables ILTASEU et ILTATRC et cherchez les seuils en question. Ensuite, informez Marie-Christine ou Marie-Hélène de l'erreur afin qu'elles la corrigent. Enfin, relancez la procédure.  

Dans tous les cas, il faut relancer les procédures jusqu'à ce qu'elles ne mettent plus rien à jour (les mises à jour étant indiquées dans la fenêtre des résulats des requêtes de SQLDevelopper).

#### 1.3 Contrôle final : les vues préfixées MAJ ou New
Ces vues permettent de vérifier si la mise à jour s'est bien passée, cependant ce dernier contrôle n'est pas forcément nécessaire car les procédures les utilisent pour leur mise à jour du schéma SIDU.  

![Vues_MAJ_NEW_Base_Voie](vues_maj_new_base_voie)

#### 1.4 Reconstruction de V_LM_VOIE dans le schéma GEO

La vue matérialisée GEO.V_LM_VOIE contient la géométrie et les données attributaires des voies, les mettant ainsi à disposition des utilisateurs. C'est aussi cette vue qui permet de savoir si un tronçon dispose de deux noms différents. Le seul cas possible de ce cas de figure est un tronçon qui relie deux communes. Tous les autres cas sont des erreurs de saisie.

##### 1.4.1 Faire un test sur la vue matérialisée "LM_VOIE_2_NEW"
Cette vue matérialisée n'est utilisée nulle part et sert de test avant de passer en production.
1. Supprimer l'index spatial de la vue matérialisée. Cette étape est **INDSIPENSABLE** et **DOIT PRECEDER** la suppression de la vue matérialisée sous peine de bloquer le schéma (dans ce cas contacter la DSI pour qu'ils le débloquent) ;
2. Recréer la vue matérialisée ;
3. Créer un index unique sur le champ *OBJECTID*. **Attention :** cette VM n'a pas de clé primaire (de type contrainte) ;
4. Créer l'index spatial ;
5. Vérifier qu'aucun tronçon ne dispose de deux noms différents. Dans le cas contraire et s'ils ne sont pas en bordure de commune, demandez à Marie-Christine ou Marie-Hélène de les corriger, puis relancez les six procédures ;

##### 1.4.2 Mise à jour de la vue matérialisée "V_LM_VOIE" pour la production
1. Il faut recréer cette VM un vendredi soir afin que peu ou pas d'application ne l'utilise ;
2. Supprimer l'index spatial de la vue matérialisée. Cette étape est **INDSIPENSABLE** et **DOIT PRECEDER** la suppression de la vue matérialisée sous peine de bloquer le schéma (dans ce cas contacter la DSI pour qu'ils le débloquent) ;
3. Recréer la vue matérialisée ;
4. Créer un index unique sur le champ *OBJECTID*. **Attention :** cette VM n'a pas de clé primaire (de type contrainte) ;
5. Créer l'index spatial ;

## II. Création des carroyages INSEE

### Contexte :
L'INSEE proposent des statistiques démographiques à plusieurs échelles (IRIS, communes, départements, etc), ainsi que des carroyages. Le carroyage est une technique de quadrillage consistant à découper le territoire en carreaux pour y diffuser de l’information statistique à un niveau faiblement agrégé. Cette technique permet de diffuser des données sur les revenus fiscaux des ménages en respectant l'anonymat des données. Cependant, aucun carroyage n'est continu, en effet certaines zones comme les parcs naturels ne sont pas couvertes par les carroyages en raison de leur trop faible densité de population. Hors les chefs de projets ont besoin de carroyages continus. Maxime a donc créé des workbench qui remplissent les carroyages à trous de l'INSEE.

### Emplacement en base :
* Instance : MULTIT (Oracle 12C);
* Schéma : G_INSEE ;
* Tables : CAR_FILOSOFI_2015_1KM / CAR_FILOSOFI_2015_200M / CAR_FILOSOFI_2015_NIV_NAT / CARROYAGE_100M_NODATA / CARROYAGE_200M_NODATA / CARROYAGE_1KM_NODATA /
* Catégories des tables : les tables préfixées *CAR_FILOSOFI* ont été créées à partir des données INSEE, les tables préfixées *Carroyage* ont été créées et remplit par la DIG ;  

![Emplacement_carroyage_insee](emplacement_carroyage_insee)

### Noms des workbench utilisés:

* Carroyage_1km.fmw ;
* Carroyage_200m.fmw ;
* Carroyage_100m.fmw ;
* Grille_1km_vide.fmw ;
* Grille_200m_vide.fmw ;
* Grille_100m_vide.fmw ;
Ces documents se trouvent dans le dossier P:\Tuilage MR-OD\Carroyage INSEE.

### Hiérarchie des carroyages :
**Il y a en tout trois tailles de carroyage différentes qui s'emboîtent les unes dans les autres :**
* 1km x 1km ;
* 200m x 200m ;
* 100m x 100m ;  
La couche de carroyage de 100m x 100m n'est pas produite par l'INSEE mais créer par la direction à la demande des chefs de projet.

### Informations techniques :
Le système de projection de chaque carroyage source est le *EPSG:3035 (système de projection européen)*.  

Les workbench permettent de :
* Créer des carroyages continus sans données dans les tables préfixées *Carroyage_* ;
* Attribution d'un identifiant unique à chaque carreau ;
* Remplir les trous laissés par le carroyage de l'INSEE dans les tables préfixées *CAR_FILOSOFI*
* Créer un identifiant qui ressemble aux identifiants de l'INSEE pour chaque carreau (Exemple : CRS3035RES1000mNXminYmin);
* Créer le carroyage de 100m x 100m qui est spécifique à la MEL;
* Ajouter un champ MEL pour pouvoir filtrer les carraux situés sur le territoire métropolitain;
* Les couches ont une emprise recouvrant les Hauts-de-France;

### Informations méthodologiquses :

Les différentes étapes du workbench:
* Indiquer les coordonnées de la couche(determinées manuellement);
* Déterminer le nombre de colonnes et de lignes du carroyage(determiné mathématiquement);
* Reconstitution de l'identifiant avec l'outil *AttributeManager*;
* Reprojection de la couche en *EPSG: 2154*;
* Intersection spatiale de la couche avec la région pour ne garder que les carreaux situés dans les hauts-de-France;
* Intersection spatiale de la couche avec le territoire métropolitain pour mettre à jour le champ *MEL*;
* Ajout d'un champ pour permettre une correspondance avec les carreaux d'un carroyage de niveau supérieur;

La normalisation des carroyages (tables, commentaires, vues) est faite par des requêtes une fois les carroyages terminés. Elles sont dans le fichier *carroyageNormalisation.sql*.